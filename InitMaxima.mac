/*
Init File for school used it in this way:
  - place File in same directory as your Maxima File
  - load it with: batchload("filename")$
*/

kill(all)$
ratprint: false$
realonly:true$
fpprintprec: 4$
debug:false$
keepfloat:true$
(setf *debugger-hook* nil)$


/* --------------- Zeichnen ----------------------------------------- */
/* testet ob es eine Variable gibt */
check_Var(test, options):=block(
    /* make local variables */
    [a],
    a:false,
     /* Key vorhanden, verschieden von false ? */
    if assoc(test,options ) # false then a:true,
    return(a)
)$

/* private function */
plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename,tL):=block(
  load(draw),
  wxdraw2d(
    xrange=[von,bis],
    yrange=they,
    xaxis=true, yaxis=true,
    xlabel=x_label,
    ylabel=y_label,
    title=thetitle,
    tL,
    pointlist
 ),

 /* Ausgabe Datei */
 if filename # "-1" then
      draw2d(
        xrange=[von,bis],
        yrange=they,
        xaxis=true, yaxis=true,
        xlabel=x_label,
        ylabel=y_label,
        title=thetitle,
        grid=true,
        tL,
        pointlist,
        user_preamble = "set encoding utf8; set terminal svg enhanced font \"Helvetica,18\"",
        file_name = filename,
        terminal = svg
      )
)$

Zeichne(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [filename,x_label,y_label,thepath,they,thetitle,tcolors,tlabels,tL],
    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then filename:"-1"
    else                                       filename: assoc(filename,options),
    if check_Var(xlabel, options)=false then x_label:"x-Achse"
    else                                     x_label: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then y_label:"y-Achse"
    else                                     y_label: assoc(ylabel,options),

    if check_Var(title, options)=false then  thetitle:""
    else                                     thetitle: assoc(title,options),

    if check_Var(y, options)=false then  they: auto
    else                                 they: assoc(y,options),

    /* Beschriftungen im Stil [ ["Name",x,y], ... ] */
    if check_Var(labels, options)=false then  tlabels: []
    else                                      tlabels: assoc(labels,options),
    tL:[],
    /* jeden Label Eintrag eigens als label() angeben mit Farbe black */
    for i: 1 while  i<=length(tlabels) do block(
      push(label(tlabels[i]), tL),
      push(color=black, tL)
    ),

    /* Liste? */
    if listp(gl) then
    block(
       if length(gl)=1 then gl: makelist (gl)
    ) else
       gl: makelist (gl),

    if check_Var(colors, options)=false then block(
      /* alle Farben sw machen */
      tcolors: makelist (black, i, length(gl))
    )
    else block(
      tcolors: assoc(colors,options),
      /* bis zum Ende schwarz machen */
      if(length(tcolors)<length(gl)) then block(
        blacklist: makelist ("black", i, length(tcolors), length(gl)-length(tcolors)+1),
        tcolors: append(tcolors, blacklist)
      )
    ),

    pointlist: makelist ([color=tcolors[i], line_width=3, explicit(gl[i],x,von,bis)], i, length(gl)),
    plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename,tL)
)$

ZeichnePunkte(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [filename,x_label,y_label,thepath,they,thetitle,tL],
    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then filename:"-1"
    else                                       filename: assoc(filename,options),

    if check_Var(xlabel, options)=false then x_label:"x-Achse"
    else                                     x_label: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then y_label:"y-Achse"
    else                                     y_label: assoc(ylabel,options),

    if check_Var(title, options)=false then  thetitle:""
    else                                     thetitle: assoc(title,options),

    if check_Var(y, options)=false then  they: auto
    else                                 they: assoc(y,options),

    /* Beschriftungen im Stil [ ["Name",x,y], ... ] */
    if check_Var(labels, options)=false then  tlabels: []
    else                                      tlabels: assoc(labels,options),
    tL:[],
    /* jeden Label Eintrag eigens als label() angeben mit Farbe black */
    for i: 1 while  i<=length(tlabels) do block(
      push(label(tlabels[i]), tL),
      push(color=black, tL)
    ),

    /* Liste? */
    if listp(gl) then
    block(
       if length(gl)=1 then gl: makelist (gl)
    ) else
       gl: makelist (gl),
    pointlist: gl,

    plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename,tL)
)$

/* --------------- CSV ---------------------------- */
ReadCSV(filename,[options]):=block(
    [s,M,i,tseparator,tskip,tS],
    if check_Var(separator, options)=false then tS: 'semicolon
    else block(
        tseparator: assoc(separator,options),
        if tseparator="," then tS: 'comma,
        if tseparator="|" then tS: 'pipe,
        if tseparator=";" then tS: 'semicolon,
        if tseparator=" " then tS: 'space
    ),

    if check_Var(skip, options)=false then tskip: 0
    else                                   tskip: assoc(skip,options),

    s : openr(filename),
    /* skip lines */
    for i: 0 while  i<tskip do readline(s),
    /* read the following (comma-separated) lines into matrix M */
    M : read_matrix(s, tS),
    close(s),
    /* Spalten zu Zeilen */
    return(args(transpose(M)))
)$

/* --------------- Funktion aufstellen ------------------------------- */
CreateFunktion(p1,p2, f):=
block(
    gl1:subst ([x=p1[1], y=p1[2]], f),
    gl2:subst ([x=p2[1], y=p2[2]], f),
    erg: solve([gl1,gl2],[a,b]),
    return(
        subst ([a=rhs(erg[1][1]), b=rhs(erg[1][2])], f)
    )
)$
