/*
Init File for school used it in this way:
  - place File in same directory as your Maxima File
  - load it with: batchload("filename")$
*/

kill(all)$
ratprint: false$
realonly:true$
fpprintprec: 4$
debug:false$
keepfloat:true$
(setf *debugger-hook* nil)$


/* --------------- Zeichnen ----------------------------------------- */
/* testet ob es eine Variable gibt */
check_Var(test, options):=block(
    /* make local variables */
    [a],
    a:false,
     /* Key vorhanden, verschieden von false ? */
    if assoc(test,options ) # false then a:true,
    return(a)
)$

/* private function */
plotall(vvon,vbis,vy,vxlabel,vylabel,vtitle,vpointlist,vfilename,vtL):=block(
  load(draw),
  wxdraw2d(
    xrange=[vvon,vbis],
    yrange=vy,
    xaxis=true, yaxis=true,
    xlabel=vxlabel,
    ylabel=vylabel,
    title=vtitle,
    vtL,
    vpointlist
 ),

 /* Ausgabe Datei */
 if vfilename # "-1" then
      draw2d(
        xrange=[vvon,vbis],
        yrange=vy,
        xaxis=true, yaxis=true,
        xlabel=vxlabel,
        ylabel=vylabel,
        title=vtitle,
        grid=true,
        vtL,
        vpointlist,
        user_preamble = "set encoding utf8; set terminal svg enhanced font \"Helvetica,18\"",
        file_name = vfilename,
        terminal = svg
      )
)$

check_Labels(options):=block(
  /* lokale Variable */
  [vlabels,vtL],

  /* Beschriftungen im Stil [ ["Name",x,y], ... ] */
  if check_Var(labels, options)=false then  vlabels: []
  else                                      vlabels: assoc(labels,options),
  vtL:[],
  /* jeden Label Eintrag eigens als label() angeben mit Farbe black */
  for i: 1 while  i<=length(vlabels) do block(
    push(label(vlabels[i]), vtL),
    push(color=black, vtL)
  ),
  return(vtL)
)$

/* Liste von Funktionen oder nur eine Funktion? */
check_Gl(gl):=block(
  /* lokale Variable */
  [vgl],

  /* Liste? */
  if listp(gl) then block(
    if length(gl)=1 then vgl: makelist(gl)
    else vgl: gl
  ) else vgl: makelist(gl),
  return(vgl)
 )$

check_Colors(gl, options):=block(
 /* lokale Variable */
 [vcolors,blacklist],

 if check_Var(colors, options)=false then block(
   /* alle Farben sw machen */
   vcolors: makelist (black, i, length(gl))
 )
 else block(
   vcolors: assoc(colors,options),
   /* bis zum Ende schwarz machen */
   if(length(vcolors)<length(gl)) then block(
     blacklist: makelist ("black", i, 1, length(gl)-length(vcolors)),
     vcolors: append(vcolors, blacklist)
   )
 ),
 return(vcolors)
)$


check_Legend(gl, options):=block(
  /* lokale Variable */
  [vL,blacklist],

  /* Legende setzen */
  if check_Var(legend, options)=false then block(
    /* keine Legende alles leer machen */
    vL: makelist ("", i, 1, length(gl))
  )
  else block(
    vL: assoc(legend,options),
    /* bis zum Ende leer machen */
    if(length(vL)<length(gl)) then block(
      blacklist: makelist ("", i, 1, length(gl)-length(vL)),
      vL: append(vL, blacklist)
    )
  ),
  return(vL)
)$


/*----------------------------------------------------------------------------*/

Zeichne(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [vfilename,vxlabel,vylabel,vy,vtitle,vcolors,vtL,vlegend,vL,vgl],

    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then vfilename:"-1"
    else                                       vfilename: assoc(filename,options),
    if check_Var(xlabel, options)=false then vxlabel:"x-Achse"
    else                                     vxlabel: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then vylabel:"y-Achse"
    else                                     vylabel: assoc(ylabel,options),

    if check_Var(title, options)=false then  vtitle:""
    else                                     vtitle: assoc(title,options),

    if check_Var(titel, options)=false then  vtitle:""
    else                                     vtitle: assoc(titel,options),

    if check_Var(y, options)=false then  vy: auto
    else                                 vy: assoc(y,options),

    /* check all Parameters --------------------------------------------------*/
    vgl: check_Gl(gl),
    vtL:check_Labels(options),
    vcolors: check_Colors(gl, options),
    vL: check_Legend(gl, options),

    vpointlist: makelist ([key=vL[i], color=vcolors[i], line_width=3, explicit(vgl[i],x,von,bis)], i, length(vgl)),

    plotall(von, bis, vy, vxlabel, vylabel, vtitle, vpointlist, vfilename, vtL)
)$

ZeichnePunkte(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [vfilename,vxlabel,vylabel,vy,vtitle,vtL,vgl],

    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then vfilename:"-1"
    else                                       vfilename: assoc(filename,options),

    if check_Var(xlabel, options)=false then vxlabel:"x-Achse"
    else                                     vxlabel: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then vylabel:"y-Achse"
    else                                     vylabel: assoc(ylabel,options),

    if check_Var(title, options)=false then  vtitle:""
    else                                     vtitle: assoc(title,options),

    if check_Var(titel, options)=false then  vtitle:""
    else                                     vtitle: assoc(titel,options),

    if check_Var(y, options)=false then  vy: auto
    else                                 vy: assoc(y,options),

    /* check all Parameters --------------------------------------------------*/
    vgl: check_Gl(gl),
    vtL:check_Labels(options),

    vpointlist:vgl,
    plotall(von, bis, vy, vxlabel, vylabel, vtitle, vpointlist, vfilename, vtL)
)$

/* --------------- CSV ---------------------------- */
ReadCSV(filename,[options]):=block(
    [s,M,i,tseparator,tskip,tS],
    if check_Var(separator, options)=false then tS: 'semicolon
    else block(
        tseparator: assoc(separator,options),
        if tseparator="," then tS: 'comma,
        if tseparator="|" then tS: 'pipe,
        if tseparator=";" then tS: 'semicolon,
        if tseparator=" " then tS: 'space
    ),

    if check_Var(skip, options)=false then tskip: 0
    else                                   tskip: assoc(skip,options),

    s : openr(filename),
    /* skip lines */
    for i: 0 while  i<tskip do readline(s),
    /* read the following (comma-separated) lines into matrix M */
    M : read_matrix(s, tS),
    close(s),
    /* Spalten zu Zeilen */
    return(args(transpose(M)))
)$

/* --------------- Funktion aufstellen ------------------------------- */
CreateFunktion(p1,p2, f):=
block(
    gl1:subst ([x=p1[1], y=p1[2]], f),
    gl2:subst ([x=p2[1], y=p2[2]], f),
    erg: solve([gl1,gl2],[a,b]),
    return(
        subst ([a=rhs(erg[1][1]), b=rhs(erg[1][2])], f)
    )
)$
