/*
Init File for school used it in this way:
  - place File in same directory as your Maxima File
  - load it with: batchload("filename")$
*/

kill(all)$
ratprint: false$
realonly:true$
fpprintprec: 4$
debug:false$
keepfloat:true$
(setf *debugger-hook* nil)$

/* --------------- Zeichnen ----------------------------------------- */
/* testet ob es eine Variable gibt */
check_Var(test, options):=block(
    /* make local variables */
    [a],
    a:false,
     /* Key vorhanden, verschieden von false ? */
    if assoc(test,options ) # false then a:true,
    return(a)
)$

/* private function */
plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename):=block(
  load(draw),
  wxdraw2d(
    xrange=[von,bis],
    yrange=they,
    xaxis=true, yaxis=true,
    xlabel=x_label,
    ylabel=y_label,
    title=thetitle,
    pointlist
 ),

 /* Ausgabe Datei */
 if filename # "-1" then
      draw2d(
        xrange=[von,bis],
        yrange=they,
        xaxis=true, yaxis=true,
        xlabel=x_label,
        ylabel=y_label,
        title=thetitle,
        grid=true,
        pointlist,
        user_preamble = ["
            set encoding utf8
            set terminal svg enhanced font \"Helvetica,18\"
        "],
        file_name = filename,
        terminal = svg
      )
)$

Zeichne(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [filename,x_label,y_label,thepath,they,thetitle],
    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then filename:"-1"
    else                                       filename: assoc(filename,options),
    if check_Var(xlabel, options)=false then x_label:"x-Achse"
    else                                     x_label: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then y_label:"y-Achse"
    else                                     y_label: assoc(ylabel,options),

    if check_Var(title, options)=false then  thetitle:""
    else                                     thetitle: assoc(title,options),

    if check_Var(y, options)=false then  they: auto
    else                                 they: assoc(y,options),

    /* Liste? */
    if listp(gl) then
    block(
       if length(gl)=1 then gl: makelist (gl)
    ) else
       gl: makelist (gl),
    pointlist: makelist ([color=black, line_width=3, explicit(gl[i],x,von,bis)], i, length(gl)),

    plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename)
)$

ZeichnePunkte(gl,von,bis,[options]):=
block(
    /* lokale Variable */
    [filename,x_label,y_label,thepath,they,thetitle],
    /* Optionale Parameter laden bzw. setzen */
    if check_Var(filename, options)=false then filename:"-1"
    else                                       filename: assoc(filename,options),

    if check_Var(xlabel, options)=false then x_label:"x-Achse"
    else                                     x_label: assoc(xlabel,options),

    if check_Var(ylabel, options)=false then y_label:"y-Achse"
    else                                     y_label: assoc(ylabel,options),

    if check_Var(title, options)=false then  thetitle:""
    else                                     thetitle: assoc(title,options),

    if check_Var(y, options)=false then  they: auto
    else                                 they: assoc(y,options),

    /* Liste? */
    if listp(gl) then
    block(
       if length(gl)=1 then gl: makelist (gl)
    ) else
       gl: makelist (gl),
    pointlist: gl,

    plotall(von,bis,they,x_label,y_label,thetitle,pointlist,filename)
)$


/* --------------- 2dim Gleichungssystem ---------------------------- */
GlSys2(gl1,gl2):=block(
    erg_solve: solve([gl1,gl2], [x,y]),
    return (first(erg_solve))
)$
GlSys2Var(gl1,gl2,a,b):=block(
    erg_solve: solve([gl1,gl2], [a,b]),
    return (first(erg_solve))
)$

/* --------------- Funktion aufstellen ------------------------------- */
CreateFunktion(p1,p2, f):=
block(
    gl1:subst ([x=p1[1], y=p1[2]], f),
    gl2:subst ([x=p2[1], y=p2[2]], f),
    erg: solve([gl1,gl2],[a,b]),
    return(
        subst ([a=rhs(erg[1][1]), b=rhs(erg[1][2])], f)
    )
)$
